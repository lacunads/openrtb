
message BidRequest {
  //Unique ID of the bid request, provided by the exchange.
  required string id = 1;

  //Array of Imp objects representing the
  //impressions offered. At least 1 Imp object is required.
  //site object;
  required Imp imp = 2;

  //Details via a Site object about the publisher’s
  //website. Only applicable and recommended for websites.
  //app object;
  // recommended
  required Site site = 3;

  //Details via an App object about the publisher’s
  //app (i.e., non-browser applications). Only applicable and
  //recommended for apps.
  // recommended
  required App app = 4;

  //Details via a Device object about the user’s
  //device to which the impression will be delivered.
  // recommended
  required Device device = 5;

  //Details via a User object about the human
  //user of the device; the advertising audience.
  // recommended
  required User user = 6;

  //Indicator of test mode in which auctions are not billable,
  //where 0 = live mode, 1 = test mode.
  optional int32 test = 7;//default 0

  //Auction type, where 1 = First Price, 2 = Second Price Plus.
  //Exchange-specific auction types can be defined using values
  //greater than 500.
  optional int32 at = 8;//default 2

  //Maximum time in milliseconds the exchange allows for bids to
  //be received including Internet latency to avoid timeout. This
  //value supersedes any a priori guidance from the exchange.
  optional int32 tmax = 9;

  //White list of buyer seats (e.g., advertisers, agencies) allowed
  //to bid on this impression. IDs of seats and knowledge of the
  //buyer’s customers to which they refer must be coordinated
  //between bidders and the exchange a priori. At most, only one
  //of wseat and bseat should be used in the same request.
  //Omission of both implies no seat restrictions.
  repeated string wseat = 10;

  //Block list of buyer seats (e.g., advertisers, agencies) restricted
  //from bidding on this impression. IDs of seats and knowledge
  //of the buyer’s customers to which they refer must be
  //coordinated between bidders and the exchange a priori. At
  //most, only one of wseat and bseat should be used in the
  //same request. Omission of both implies no seat restrictions.
  repeated string bseat = 11;

  //Flag to indicate if Exchange can verify that the impressions
  //offered represent all of the impressions available in context
  //(e.g., all on the web page, all video spots such as pre/mid/post
  //roll) to support road-blocking. 0 = no or unknown, 1 = yes, the
  //impressions offered represent all that are available.
  optional int32 allimps = 12;//default 0

  //Array of allowed currencies for bids on this bid request using
  //ISO-4217 alpha codes. Recommended only if the exchange
  //accepts multiple currencies.
  repeated string cur = 13;

  //White list of languages for creatives using ISO-639-1-alpha-2.
  //Omission implies no specific restrictions, but buyers would be
  //advised to consider language attribute in the Device and/or
  //Content objects if available.
  repeated string wlang = 14;

  //Blocked advertiser categories using the IAB content
  //categories. Refer to List 5.1.
  repeated string bcat = 15;

  //Block list of advertisers by their domains (e.g., “ford.com”).
  repeated string badv = 16;

  // Block list of applications by their platform-specific exchangeindependent application identifiers. On Android, these should
  //be bundle or package names (e.g., com.foo.mygame). On iOS,
  //these are numeric IDs.
  repeated string bapp = 17;

  //object A Sorce object that provides data about the
  //inventory source and which entity makes the final decision.
  optional Source source = 18;

  //A Regs object that specifies any industry, legal,
  //or governmental regulations in force for this request.
  optional Regs regs = 19;

  //Placeholder for exchange-specific extensions to OpenRTB.
  optional Ext ext = 20;
}

message Ext {

}

message Source {
  //Entity responsible for the final impression sale decision, where
  //0 = exchange, 1 = upstream source.
  //recommended
  required int32 fd = 1;

  //Transaction ID that must be common across all participants in
  //this bid request (e.g., potentially multiple exchanges).
  //recommended
  required string tid = 2;

  //Payment ID chain string containing embedded syntax
  //described in the TAG Payment ID Protocol v1.0.
  required string pchain = 3;

  //Placeholder for exchange-specific extensions to OpenRTB
  optional Ext ext = 4;
}

message Regs {
  //Flag indicating if this request is subject to the COPPA
  //regulations established by the USA FTC, where 0 = no, 1 = yes.
  required int32 coppa = 1;

  //Placeholder for exchange-specific extensions to OpenRTB
  optional Ext ext = 2;
}

message Imp {
  //A unique identifier for this impression within the context of
  //the bid request (typically, starts with 1 and increments.
  required string id  = 1;

  //An array of Metric object .
  repeated Metric metric = 2;

  //A Banner object ; required if this impression is
  //offered as a banner ad opportunity.
  optional Banner banner = 3;

  //A Video object ; required if this impression is
  //offered as a video ad opportunity.
  optional Video video = 4;

  //An Audio object ; required if this impression is
  //offered as an audio ad opportunity.
  optional Audio audio = 5;

  //A Native object ; required if this impression is
  //offered as a native ad opportunity.
  optional Native native = 6;

  //A Pmp object containing any private
  //marketplace deals in effect for this impression.
  optional Pmp pmp = 7;

  //Name of ad mediation partner, SDK technology, or player
  //responsible for rendering ad (typically video or mobile). Used
  //by some ad servers to customize ad code by partner.Recommended for video and/or apps.
  optional string displaymanager = 8;

  //ersion of ad mediation partner, SDK technology, or player
  //responsible for rendering ad (typically video or mobile). Used
  //by some ad servers to customize ad code by partner.
  //Recommended for video and/or apps.
  optional string displaymanagerver = 9;

  //1 = the ad is interstitial or full screen, 0 = not interstitial.
  optional int32 instl = 10;//default 0

  //Identifier for specific ad placement or ad tag that was used to
  //initiate the auction. This can be useful for debugging of any
  //issues, or for optimization by the buyer.
  optional string tagid = 11;

  //Minimum bid for this impression expressed in CPM.
  optional float bidfloor = 12;//default 0

  //Currency specified using ISO-4217 alpha codes. This may be
  //different from bid currency returned by bidder if this is
  //allowed by the exchange.
  optional string bidfloorcur = 13;//default “USD”

  //Indicates the type of browser opened upon clicking the
  //creative in an app, where 0 = embedded, 1 = native. Note that
  //the Safari View Controller in iOS 9.x devices is considered a
  //native browser for purposes of this attribute.
  optional int32 clickbrowser = 14;

  //lag to indicate if the impression requires secure HTTPS URL
  //creative assets and markup, where 0 = non-secure, 1 = secure.
  //If omitted, the secure state is unknown, but non-secure HTTP
  optional int32 secure = 15;

  //Array of exchange-specific names of supported iframe busters.
  repeated string iframebuster = 16;

  //Advisory as to the number of seconds that may elapse
  //between the auction and the actual impression.
  optional int32 exp = 17;

  //Placeholder for exchange-specific extensions to OpenRTB.
  optional Ext ext = 18;

  message Ext {
    optional int32 deeplink       = 1;
    optional Skadn  skadn         = 2;
    optional int32  rewarded      = 3;
    optional int32  fallback      = 4;
    optional int32  adtype        = 5;
    optional int32  placement_type= 6;
    message Skadn {
       repeated string versions           = 1;
       optional string version            = 2;
       optional string sourceapp          = 3;
       repeated string skadnetids         = 4;
       optional Skadnetlist skadnetlist   = 5;
       message Skadnetlist{
         optional int32 max    =1;
         repeated int32 excl   =2;
         repeated string addl  =3;
       }
    }
  }
}

message Metric {
  //Type of metric being presented using exchange curated string
  //names which should be published to bidders a priori.
  required string type = 1;

  //Number representing the value of the metric. Probabilities
  //must be in the range 0.0 – 1.0.
  required float value = 2;

  //Source of the value using exchange curated string names
  //which should be published to bidders a priori. If the exchange
  //itself is the source versus a third party, “EXCHANGE” is
  //recommended.
  required string vendor = 3;

  //Placeholder for exchange-specific extensions to OpenRTB.
  optional Ext ext = 4;
}

message Banner {
  enum Expdir {
    Left = 1;
    Right = 2;
    Up = 3;
    Down = 4;
    Full_Screen = 5;
  }

  enum Btype {
      XHTML_Text_Ad = 1;
      XHTML_Banner_Ad = 2;
      JavaScript = 3;
      iframe = 4;
  }

  //Array of format objects representing the
  //banner sizes permitted. If none are specified, then use of the
  //h and w attributes is highly recommended.
  //recommended
  repeated Format format = 1;

  //Exact width in device independent pixels (DIPS);
  //recommended if no format objects are specified.
  required int32 w = 2;

  //Exact height in device independent pixels (DIPS);
  //recommended if no format objects are specified.
  required int32 h = 3;

  //NOTE: Deprecated in favor of the format array.
  //Maximum width in device independent pixels (DIPS).
  //DEPRECATED
  optional int32 wmax = 4;

  //NOTE: Deprecated in favor of the format array.
  //Maximum height in device independent pixels (DIPS).
  //DEPRECATED
  optional int32 hmax = 5;

  //NOTE: Deprecated in favor of the format array.
  //Minimum width in device independent pixels (DIPS).
  //DEPRECATED
  optional int32 wmin = 6;

  //NOTE: Deprecated in favor of the format array.
  //Minimum height in device independent pixels (DIPS).
  //DEPRECATED
  optional int32 hmin = 7;

  //Blocked banner ad types. Refer to List 5.2.
  repeated Btype btype = 8;

  //Blocked creative attributes. Refer to List 5.3.
  repeated Attr battr = 9;

  //Ad position on screen. Refer to List 5.4.
  optional Pos pos = 10;

  //Content MIME types supported. Popular MIME types may
  //include “application/x-shockwave-flash”, “image/jpg”, and “image/gif”.
  repeated int32 mimes = 11;

  //Indicates if the banner is in the top frame as opposed to an
  //iframe, where 0 = no, 1 = yes.
  optional int32 topframe = 12;

  //Directions in which the banner may expand. Refer to List 5.5.
  repeated Expdir expdir = 13;

  //List of supported API frameworks for this impression. Refer to
  //List 5.6. If an API is not explicitly listed, it is assumed not to be
  //supported.
  repeated Api api = 14;

  //Unique identifier for this banner object. Recommended when
  //Banner objects are used with a Video object to
  //represent an array of companion ads. Values usually start at 1
  //and increase with each object; should be unique within an
  //impression.
  optional string id = 15;

  //Relevant only for Banner objects used with a Video object
  //in an array of companion ads. Indicates the
  //companion banner rendering mode relative to the associated
  //video, where 0 = concurrent, 1 = end-card.
  optional int32 vcm = 16;

  //Placeholder for exchange-specific extensions to OpenRTB.
  optional Ext ext = 17;
}

enum Api {
  VPAID_1_0 = 1;
  VPAID_2_0 = 2;
  MRAID_1 = 3;
  ORMMA = 4;
  MRAID_2 = 5;
  MRAID_3 = 6;
}

enum Pos {
  Unknown = 0;
  Above_the_Fold = 1;
  DEPRECATED = 2;
  Below_the_Fold = 3;
  Header = 4;
  Footer = 5;
  Sidebar = 6;
  Full_Screen = 7;
}

enum Attr {
  Audio_Ad_Auto_Play = 1;
  Audio_Ad_User_Initiated = 2;
  Expandable_Automatic = 3;
  Expandable_User_Initiated_Click = 4;
  Expandable_User_Initiated_Rollover = 5;
  In_Banner_Video_Ad_Auto_Play = 6;
  In_Banner_Video_Ad_User_Initiated = 7;
  Pop = 8;
  Provocative_or_Suggestive_Imagery = 9;
  Shaky_Flashing_Flickering_Extreme_Animation_Smileys = 10;
  Surveys = 11;
  Text_Only = 12;
  User_Interactive = 13;
  Windows_Dialog_or_Alert_Style = 14;
  Has_Audio_On_Off_Button = 15;
  Ad_Provides_Skip_Button = 16;
  Adobe_Flash = 17;

}

enum Protocol {
  VAST_1_0 = 1;
  VAST_2_0 = 2;
  VAST_3_0 = 3;
  VAST_1_0_Wrapper = 4;
  VAST_2_0_Wrapper = 5;
  VAST_3_0_Wrapper = 6;
  VAST_4_0 = 7;
  VAST_4_0_Wrapper = 8;
  DAAST_1_0 = 9;
  DAAST_1_0_Wrapper = 10;
}
message Video {

  enum Placement {
    In_Stream = 1;
    In_Banner = 2;
    In_Article = 3;
    In_Feed = 4;
    Interstitial_Slider_Floating = 5;
  }

  enum Companiontype {
    Static_Resource = 1;
    HTML_Resource = 2;
    iframe_Resource = 3;
  }

  //Content MIME types supported (e.g., “video/x-ms-wmv”,“video/mp4”).
  repeated string mimes = 1;

  //Minimum video ad duration in seconds.
  //recommended
  required int32 minduration = 2;

  //Maximum video ad duration in seconds.
  //recommended
  required int32 maxduration = 3;

  //Array of supported video protocols. Refer to List 5.8. At least
  //one supported protocol must be specified in either the
  //protocol or protocols attribute.
  //recommended
  repeated Protocol protocols = 4;

  //NOTE: Deprecated in favor of protocols. Supported video protocol. Refer to List 5.8. At least one
  //supported protocol must be specified in either the protocol
  //or protocols attribute.
  optional Protocol protocol = 5;

  //Width of the video player in device independent pixels (DIPS).
  //recommended
  required int32 w  = 6;

  //Height of the video player in device independent pixels (DIPS).
  //recommended
  required int32 h  = 7;

  //Indicates the start delay in seconds for pre-roll, mid-roll, or
  //post-roll ad placements. Refer to List 5.12 for additional
  //generic values.
  //recommended
  optional int32 startdelay = 8;

  //Placement type for the impression. Refer to List 5.9.
  optional Placement placement = 9;

  //Indicates if the impression must be linear, nonlinear, etc. If
  //    none specified, assume all are allowed. Refer to List 5.7.
  optional int32 linearity = 10;

  //Indicates if the player will allow the video to be skipped,
  //where 0 = no, 1 = yes.
  //If a bidder sends markup/creative that is itself skippable, the
  //Bid object should include the attr array with an element of
  //6 indicating skippable video. Refer to List 5.3.
  optional int32 skip = 11;

  //Videos of total duration greater than this number of seconds
  //    can be skippable; only applicable if the ad is skippable.
  optional int32 skipmin = 12;//default 0

  //Number of seconds a video must play before skipping is
  //    enabled; only applicable if the ad is skippable.
  optional int32 skipafter = 13;//default 0

  //If multiple ad impressions are offered in the same bid request,
  //    the sequence number will allow for the coordinated delivery
  //of multiple creatives.
  optional int32 sequence = 14;

  //Blocked creative attributes. Refer to List 5.3.
  repeated Attr battr = 15;

  //Maximum extended ad duration if extension is allowed. If
  //    blank or 0, extension is not allowed. If -1, extension is
  //    allowed, and there is no time limit imposed. If greater than 0,
  //    then the value represents the number of seconds of extended
  //    play supported beyond the maxduration value.
  optional int32 maxextended = 16;

  //Minimum bit rate in Kbps.
  optional int32 minbitrate = 17;

  //Maximum bit rate in Kbps.
  optional int32 maxbitrate = 18;

  //Indicates if letter-boxing of 4:3 content into a 16:9 window is
  //    allowed, where 0 = no, 1 = yes.
  optional int32 boxingallowed = 19;//default 1

  //Playback methods that may be in use. If none are specified,
  //    any method may be used. Refer to List 5.10. Only one
  //    method is typically used in practice. As a result, this array may
  //    be converted to an integer in a future version of the
  //    specification. It is strongly advised to use only the first
  //    element of this array in preparation for this change.
  repeated int32 playbackmethod = 20;

  //The event that causes playback to end. Refer to List 5.11.
  //    delivery integer array Supported delivery methods (e.g., streaming, progressive). If
  //    none specified, assume all are supported. Refer to List 5.15.
  optional int32 playbackend = 21;

  //Ad position on screen. Refer to List 5.4.
  optional Pos pos = 22;

  //Array of Banner objects if companion ads are
  //    available.
  repeated Banner companionad = 23;

  //List of supported API frameworks for this impression. Refer to
  //    List 5.6. If an API is not explicitly listed, it is assumed not to be
  //    supported.
  repeated Api api = 24;

  //Supported VAST companion ad types. Refer to List 5.14.
  //    Recommended if companion Banner objects are included via
  //    the companionad array. If one of these banners will be
  //    rendered as an end-card, this can be specified using the vcm
  //attribute with the particular banner .
  repeated Companiontype companiontype = 25;

  //Placeholder for exchange-specific extensions to OpenRTB.
  optional Ext ext =26;

  //Supported delivery methods (e.g., streaming, progressive). If
  //none specified, assume all are supported. Refer to List 5.15.
  repeated int32 delivery = 27;
}

message Audio {

  enum FeedType {
    Music__Service = 1;
    FM_AM_Broadcast = 2;
    Podcast = 3;
  }

  enum Volume_NormalizationMode{
    None = 0;
    Ad_Volume_Average_Normalized_to_Content = 1;
    Ad_Volume_Peak_Normalized_to_Content = 2;
    Ad_Loudness_Normalized_to_Content = 3;
    Custom_Volume_Normalization = 4;
  }
  //Content MIME types supported (e.g., “audio/mp4”).
  repeated string mimes = 1;

  //Minimum audio ad duration in seconds.
  //recommended
  required int32 minduration = 2;

  //Maximum audio ad duration in seconds.
  //recommended
  required int32 maxduration = 3;

  //Array of supported audio protocols. Refer to List 5.8.
  //recommended
  repeated int32 protocols = 4;

  //Indicates the start delay in seconds for pre-roll, mid-roll, or
  //    post-roll ad placements. Refer to List 5.12.
  //recommended
  optional int32 startdelay = 5;

  //If multiple ad impressions are offered in the same bid request,
  //    the sequence number will allow for the coordinated delivery
  //of multiple creatives.
  optional int32 sequence = 6;

  //Blocked creative attributes. Refer to List 5.3.
  repeated Attr battr = 7;

  //Maximum extended ad duration if extension is allowed. If
  //    blank or 0, extension is not allowed. If -1, extension is
  //    allowed, and there is no time limit imposed. If greater than 0,
  //    then the value represents the number of seconds of extended
  //    play supported beyond the maxduration value.
  optional int32 maxextended = 8;

  //Minimum bit rate in Kbps.
  optional int32 minbitrate = 9;

  //Maximum bit rate in Kbps.
  optional int32 maxbitrate = 10;

  //Supported delivery methods (e.g., streaming, progressive). If
  //    none specified, assume all are supported. Refer to List 5.15.
  repeated int32 delivery = 11;

  //Array of Banner objects if companion ads are
  //    available.
  repeated Banner companionad = 12;

  //List of supported API frameworks for this impression. Refer to
  //    List 5.6. If an API is not explicitly listed, it is assumed not to be
  //    supported.
  repeated Api api = 13;

  //Supported DAAST companion ad types. Refer to List 5.14.
  //    Recommended if companion Banner objects are included via
  //    the companionad array.
  repeated int32 companiontype = 14;

  //The maximum number of ads that can be played in an ad pod.
  optional int32 maxseq = 15;

  //Type of audio feed. Refer to List 5.16.
  optional FeedType feed = 16;

  //Indicates if the ad is stitched with audio content or delivered
  //    independently, where 0 = no, 1 = yes.
  optional int32 stitched = 17;

  //Volume normalization mode. Refer to List 5.17.
  optional Volume_NormalizationMode nvol = 18;

  //Placeholder for exchange-specific extensions to OpenRTB.
  optional Ext ext = 19;
}

message Native {
  //Request payload complying with the Native Ad Specification.
  required string request = 1;

  //Version of the Dynamic Native Ads API to which request
  //    complies; highly recommended for efficient parsing.
  //recommended
  required string ver = 2;

  //List of supported API frameworks for this impression. Refer to
  //    List 5.6. If an API is not explicitly listed, it is assumed not to be
  //    supported.
  repeated Api api = 3;

  //Blocked creative attributes. Refer to List 5.3.
  repeated Attr battr = 4;

  //Placeholder for exchange-specific extensions to OpenRTB
  optional Ext ext = 5;
}

message NativeRequest{
  //Use **asset request object** to show the requirement of Native ad for assets
  // and other elements. All assets and other elements should follow this request object
  repeated Asset assets = 1;

  //Native Markup version, default version is 1.2
  required string ver = 2;
}

message Asset{
  //The only identification ID of the object
  required int32 id  = 1;

  //Indicate if the asset object is a must-have for client (bidder) in order to
  // get a bid accepted. Value of 1 means yes. Value of 0 means it is not necessary
  required int32 required = 2;

  //Title object for title assets. Refer to **title object**
  optional Title title = 3;

  //Image object for image assets. Refer to **img object**
  optional Img img = 4;

  //Video object for video assets. Refer to **video object**
  optional NativeVideo video = 5;

  //Data object for data assets, eg. brand, description, rating, pricing etc.Refer to **data object**
  optional NativeData data = 6;

}

message Title {
  //Maximum title text length. Recommended text length is 25, 90, 140 characters
  required int32 len = 1;
}

message Img{
  //Indicate the specific type of image. Icon image: Value = 1 Large image: Value = 3
  required int32 type = 1;

  //Image width
  optional int32 w = 2;

  //Minimum image width. Unit is in pixels
  required int32 wmin = 3;

  //Image height / length
  optional int32 h = 4;

  //Minimum image height / length. Unit is in pixels
  required int32 hmin = 5;

  //Supported image mime-type, including but not limited to ‘image/jpg’and ‘image/gif’
  repeated string mimes = 6;
}

message NativeVideo {
  //Supported content mime-type. Currently it only supports ‘video/mp4’
  repeated string mimes = 1;

  //Minimum video ad length. Unit is in seconds
  required int32 minduration = 2;

  //Maximum video ad length. Unit is in seconds
  required int32 maxduration = 3;

  //Applicable video protocol for Publisher in Bid Response.Refer to List 5.8
  repeated Protocol protocols = 4;
}

message NativeData {
  //Indicate data object type ID. Each data object has a specific type.
  // Section **5.12 Data Asset Type** is the reference of its enumerated values
  repeated string type = 1;

  //Maximum number of characters allowed
  required int32 len = 2;
}

message Format {
  //Width in device independent pixels (DIPS).
  required int32 w = 1;

  //Height in device independent pixels (DIPS).
  required int32 h = 2;

  //Relative width when expressing size as a ratio.
  optional int32 wratio = 3;

  //Relative height when expressing size as a ratio.
  optional int32 hratio = 4;

  //The minimum width in device independent pixels (DIPS) at
  //    which the ad will be displayed the size is expressed as a ratio.
  optional int32 wmin = 5;

  //Placeholder for exchange-specific extensions to OpenRTB.
  optional Ext ext = 6;
}

message Pmp {
  //Indicator of auction eligibility to seats named in the Direct
  //    Deals object, where 0 = all bids are accepted, 1 = bids are
  //    restricted to the deals specified and the terms thereof.
  optional int32 private_auction = 1;//default 0

  //Array of Deal objects that convey the specific
  //    deals applicable to this impression.
  repeated Deal deals = 2;

  //Placeholder for exchange-specific extensions to OpenRTB.
  optional Ext ext = 3;
}

message Deal {
  //A unique identifier for the direct deal.
  required string id  = 1;

  //Minimum bid for this impression expressed in CPM.
  optional float bidfloor = 2;//default 0

  //Currency specified using ISO-4217 alpha codes. This may be
  //    different from bid currency returned by bidder if this is
  //    allowed by the exchange.
  optional string bidfloorcur = 3;//default ”USD”

  //Optional override of the overall auction type of the bid
  //    request, where 1 = First Price, 2 = Second Price Plus, 3 = the
  //    value passed in bidfloor is the agreed upon deal price.
  //Additional auction types can be defined by the exchange.
  required int32 at = 4;

  //hitelist of buyer seats (e.g., advertisers, agencies) allowed to
  //    bid on this deal. IDs of seats and the buyer’s customers to
  //    which they refer must be coordinated between bidders and
  //    the exchange a priori. Omission implies no seat restrictions.
  repeated string wseat = 5;

  //Array of advertiser domains (e.g., advertiser.com) allowed to
  //    bid on this deal. Omission implies no advertiser restrictions.
  repeated string wadomain = 6;

  //Placeholder for exchange-specific extensions to OpenRTB.
  optional Ext ext = 7;
}

message Site {
  //Exchange-specific site ID.
  //recommended
  required string id = 1;

  //Site name (may be aliased at the publisher’s request).
  optional string name = 2;

  //Domain of the site (e.g., “mysite.foo.com”).
  optional string domain = 3;

  //Array of IAB content categories of the site. Refer to List 5.1.
  repeated string cat = 4;

  //Array of IAB content categories that describe the current
  //    section of the site. Refer to List 5.1.
  repeated string sectioncat = 5;

  //Array of IAB content categories that describe the current page
  //    or view of the site. Refer to List 5.1.
  repeated string pagecat = 6;

  //URL of the page where the impression will be shown.
  optional string page = 7;

  //Referrer URL that caused navigation to the current page.
  optional string ref = 8;

  //Search string that caused navigation to the current page.
  optional string search = 9;

  // Indicates if the site has been programmed to optimize layout
  //    when viewed on mobile devices, where 0 = no, 1 = yes.
  optional int32 mobile = 10;

  //Indicates if the site has a privacy policy, where 0 = no, 1 = yes.
  optional int32 privacypolicy = 11;

  //Details about the Publisher of the site.
  optional Publisher publisher = 12;

  //Details about the Content within the site.
  optional Content content = 13;

  //Comma separated list of keywords about the site.
  optional string keywords = 14;

  //Placeholder for exchange-specific extensions to OpenRTB.
  optional Ext ext = 15;
}

message App {
  //Exchange-specific app ID.
  //recommended
  required string id = 1;

  //App name (may be aliased at the publisher’s request).
  optional string name = 2;

  //A platform-specific application identifier intended to be
  //    unique to the app and independent of the exchange. On
  //    Android, this should be a bundle or package name (e.g.,
  //    com.foo.mygame). On iOS, it is typically a numeric ID.
  required string bundle = 3;

  //Domain of the app (e.g., “mygame.foo.com”).
  optional string domain = 4;

  //App store URL for an installed app; for IQG 2.1 compliance.
  //    OpenRTB API Specification Version 2.5 IAB Technology Lab
  //    www.iab.com/openrtb Page 21
  optional string storeurl = 5;

  //Array of IAB content categories of the app. Refer to List 5.1.
  repeated string cat = 6;

  //Array of IAB content categories that describe the current
  //section of the app. Refer to List 5.1.
  repeated string sectioncat = 7;

  //Array of IAB content categories that describe the current page
  //    or view of the app. Refer to List 5.1.
  repeated string pagecat = 8;

  //Application version.
  optional string ver = 9;

  //Indicates if the app has a privacy policy, where 0 = no, 1 = yes.
  optional int32 privacypolicy = 10;

  //0 = app is free, 1 = the app is a paid version.
  optional int32 paid = 11;

  //Details about the Publisher of the app.
  optional Publisher publisher = 12;

  //Details about the Content  within the app.
  optional Content content = 13;

  //Comma separated list of keywords about the app.
  optional string keywords = 14;

  //Placeholder for exchange-specific extensions to OpenRTB.
  optional Ext ext = 15;
}

message Publisher {
  //Exchange-specific publisher ID.
  required string id  = 1;

  //Publisher name (may be aliased at the publisher’s request).
  optional string name = 2;

  //Array of IAB content categories that describe the publisher.
  //    Refer to List 5.1.
  repeated string cat = 3;

  //Highest level domain of the publisher (e.g., “publisher.com”).
  optional string domain = 4;

  //Placeholder for exchange-specific extensions to OpenRTB.
  optional Ext ext = 5;
}

message Content {

  enum ProductionQuality {
    Unknown = 0;
    Professionally_Produced = 1;
    Prosumer = 2;
    User_Generated = 3;
  }

  enum ContentContext {
    Context_Video = 1;
    Context_Game = 2;
    Context_Music = 3;
    Context_Application = 4;
    Context_Text = 5;
    Context_Other = 6;
    Context_Unknown = 7;
  }

  enum Qagmediarating {
    All_Audiences = 1;
    Everyone_Over_12 = 2;
    Mature_Audiences = 3;
  }

  //ID uniquely identifying the content.
  optional string id = 1;

  //Episode number.
  optional int32 episode = 2;

  //Content title.
  // Video Examples: “Search Committee” (television), “A New
  //    Hope” (movie), or “Endgame” (made for web).
  //    Non-Video Example: “Why an Antarctic Glacier Is Melting So
  //    Quickly” (Time magazine article).
  optional string title = 3;

  //Content series.
  //    Video Examples: “The Office” (television), “Star Wars” (movie),
  //    or “Arby ‘N’ The Chief” (made for web).
  //    Non-Video Example: “Ecocentric” (Time Magazine blog).
  optional string series = 4;

  //Artist credited with the content.
  optional string artist = 5;

  //Genre that best describes the content (e.g., rock, pop, etc).
  optional string genre = 6;

  //Album to which the content belongs; typically for audio.
  optional string album = 7;

  //International Standard Recording Code conforming to ISO3901.
  optional int32 isrc = 8;

  //Details about the content Producer .
  optional Producer producer = 9;

  //URL of the content, for buy-side contextualization or review.
  optional string url = 10;

  //Array of IAB content categories that describe the content
  // producer. Refer to List 5.1.
  repeated string cat = 11;

  //Production quality. Refer to List 5.13.
  optional ProductionQuality prodq = 12;

  //Note: Deprecated in favor of prodq.
  //    Video quality. Refer to List 5.13.
  //DEPRECATED
  optional ProductionQuality videoquality = 13;

  //Type of content (game, video, text, etc.). Refer to List 5.18.
  optional ContentContext context = 14;

  //Content rating (e.g., MPAA).
  optional string contentrating = 15;

  //User rating of the content (e.g., number of stars, likes, etc.).
  optional string userrating = 16;

  //Media rating per IQG guidelines. Refer to List 5.19.
  optional Qagmediarating v = 17;

  //Comma separated list of keywords describing the content.
  optional string keywords = 18;

  //0 = not live, 1 = content is live (e.g., stream, live blog).
  optional int32 livestream = 19;

  //0 = indirect, 1 = direct.
  optional int32 sourcerelationship = 20;

  //Length of content in seconds; appropriate for video or audio.
  optional int32 len = 21;

  //Content language using ISO-639-1-alpha-2.
  optional string language = 22;

  //Indicator of whether or not the content is embeddable (e.g.,
  // an embeddable video player), where 0 = no, 1 = yes.
  optional int32 embeddable = 23;

  //Additional content data. Each Data object represents a different data source.
  repeated Data data = 24;

  //Placeholder for exchange-specific extensions to OpenRTB.
  optional Ext ext = 25;
}

message Producer {
  //Content producer or originator ID. Useful if content is
  //    syndicated and may be posted on a site using embed tags.
  required string id = 1;

  //Content producer or originator name (e.g., “Warner Bros”).
  optional string name = 2;

  //Array of IAB content categories that describe the content
  //producer. Refer to List 5.1.
  repeated string cat = 3;

  //Highest level domain of the content producer (e.g.,
  //    “producer.com”).
  optional string domain = 4;

  //Placeholder for exchange-specific extensions to OpenRTB.
  optional Ext ext = 5;
}


message Device {
  enum DeviceType {
    DEVICE_TYPE_UNKNOWN = 0;
    DEVICE_TYPE_MOBILETABLET = 1; // 手机/平板 (版本2.0)
    DEVICE_TYPE_PC = 2; // PC (版本2.0)
    DEVICE_TYPE_CONNECTEDTV = 3; // 联网电视(版本2.0)
    DEVICE_TYPE_PHONE = 4; // 手机(版本2.2)
    DEVICE_TYPE_TABLET = 5; // 平板(版本2.2)
    DEVICE_TYPE_CONNECTEDDEVICE = 6; // 联网设备(版本2.2)
    DEVICE_TYPE_SETTOPBOX = 7; // 机顶盒(版本2.2)
  }

  enum ConnectionType {
    CONNECTION_TYPE_UNKNOWN = 0; // 未知
    CONNECTION_TYPE_ETHERNET = 1; // 以太网
    CONNECTION_TYPE_WIFI = 2;
    CONNECTION_TYPE_CELLULARUNWNOWN = 3; // 蜂窝网，第几代未知
    CONNECTION_TYPE_CELLULAR2G = 4;
    CONNECTION_TYPE_CELLULAR3G = 5;
    CONNECTION_TYPE_CELLULAR4G = 6;
    CONNECTION_TYPE_CELLULAR5G = 7;
  }

  //Browser user agent string.
  //recommended
  required string ua = 1;

  //Location of the device assumed to be the user’s current
  //    location defined by a Geo object .
  //recommended
  required Geo geo = 2;

  //Standard “Do Not Track” flag as set in the header by the
  //    browser, where 0 = tracking is unrestricted, 1 = do not track.
  //recommended
  required int32 dnt = 3;

  //“Limit Ad Tracking” signal commercially endorsed (e.g., iOS,
  //    Android), where 0 = tracking is unrestricted, 1 = tracking must
  //    be limited per commercial guidelines.
  //recommended
  required int32 lmt = 4;

  //IPv4 address closest to device.
  //  recommended
  required string ip =5;

  //IP address closest to device as IPv6.
  optional int32 ipv6 = 6;

  //The general type of device. Refer to List 5.21.
  optional DeviceType devicetype = 7;

  //Device make (e.g., “Apple”).
  optional string make = 8;

  //Device model (e.g., “iPhone”).
  optional string model = 9;

  //Device operating system (e.g., “iOS”).
  optional string os = 10;

  //Device operating system version (e.g., “3.1.2”).
  optional string osv = 11;

  //Hardware version of the device (e.g., “5S” for iPhone 5S).
  optional string hwv = 12;

  //Physical height of the screen in pixels.
  optional int32 h = 13;

  //Physical width of the screen in pixels.
  optional int32 w = 14;

  //Screen size as pixels per linear inch.
  optional int32 ppi = 15;

  //The ratio of physical pixels to device independent pixels.
  optional float pxratio = 16;

  //Support for JavaScript, where 0 = no, 1 = yes.
  optional int32 js = 17;

  //Indicates if the geolocation API will be available to JavaScript code running in the banner, where 0 = no, 1 = yes.
  optional int32 geofetch = 18;

  //Version of Flash supported by the browser.
  optional string flashver = 19;

  //Browser language using ISO-639-1-alpha-2.
  optional string language = 20;

  //Carrier or ISP (e.g., “VERIZON”) using exchange curated string
  //    names which should be published to bidders a priori.
  optional string carrier = 21;

  //Mobile carrier as the concatenated MCC-MNC code (e.g.,
  //    “310-005” identifies Verizon Wireless CDMA in the USA).
  //    Refer to https://en.wikipedia.org/wiki/Mobile_country_code
  //    for further examples. Note that the dash between the MCC
  //    and MNC parts is required to remove parsing ambiguity.
  optional string mccmnc = 22;

  //Network connection type. Refer to List 5.22.
  optional ConnectionType connectiontype = 23;

  //ID sanctioned for advertiser use in the clear (i.e., not hashed).
  optional string ifa = 24;

  //Hardware device ID (e.g., IMEI); hashed via SHA1.
  optional string didsha1 = 25;

  //Hardware device ID (e.g., IMEI); hashed via MD5.
  optional string didmd5 = 26;

  //Platform device ID (e.g., Android ID); hashed via SHA1.
  optional string dpidsha1 = 27;

  //Platform device ID (e.g., Android ID); hashed via MD5.
  optional string dpidmd5 = 28;

  //MAC address of the device; hashed via SHA1.
  optional string macsha1 = 29;

  //MAC address of the device; hashed via MD5.
  optional string macmd5 = 30;

  //Placeholder for exchange-specific extensions to OpenRTB.
  optional Ext ext = 31;
}

message Geo {

  enum LocationType{
    GPS_Location_Services = 1;
    IP_Address = 2;
    User_provided = 3;
  }

  //Latitude from -90.0 to +90.0, where negative is south.
  optional float lat = 1;

  //Longitude from -180.0 to +180.0, where negative is west.
  optional float lon = 2;

  //Source of location data; recommended when passing lat/lon. Refer to List 5.20.
  optional LocationType type = 3;

  //Estimated location accuracy in meters; recommended when
  //    lat/lon are specified and derived from a device’s location
  //    services (i.e., type = 1). Note that this is the accuracy as
  //    reported from the device. Consult OS specific documentation
  //    (e.g., Android, iOS) for exact interpretation.
  optional int32 accuracy = 4;

  //Number of seconds since this geolocation fix was established.
  //    Note that devices may cache location data across multiple
  //    fetches. Ideally, this value should be from the time the actual
  //fix was taken.
  optional int32 lastfix = 5;

  //Service or provider used to determine geolocation from IP
  //    address if applicable (i.e., type = 2). Refer to List 5.23.
  optional int32 ipservice = 6;

  //Country code using ISO-3166-1-alpha-3.
  optional string country = 7;

  //Region code using ISO-3166-2; 2-letter state code if USA.
  optional string region = 8;

  //Region of a country using FIPS 10-4 notation. While OpenRTB
  //    supports this attribute, it has been withdrawn by NIST in 2008.
  optional string regionfips104 = 9;

  //Google metro code; similar to but not exactly Nielsen DMAs.
  //    See Appendix A for a link to the codes.
  optional string metro = 10;

  //City using United Nations Code for Trade & Transport
  //    Locations. See Appendix A for a link to the codes.
  optional string city = 11;

  //Zip or postal code.
  optional string zip = 12;

  //Local time as the number +/- of minutes from UTC.
  optional int32 utcoffset = 13;

  //Placeholder for exchange-specific extensions to OpenRTB.
  optional Ext ext = 14;
}

message User {
  //Exchange-specific ID for the user. At least one of id or
  //    buyeruid is recommended.
  //recommended
  required string id = 1;

  //Buyer-specific ID for the user as mapped by the exchange for
  //    the buyer. At least one of buyeruid or id is recommended.
  //recommended
  optional string buyeruid = 2;

  //Year of birth as a 4-digit integer.
  optional int32 yob = 3;

  //Gender, where “M” = male, “F” = female, “O” = known to be
  //    other (i.e., omitted is unknown).
  optional string gender = 4;

  //Comma separated list of keywords, interests, or intent.
  optional string keywords = 5;

  //Optional feature to pass bidder data that was set in the
  //exchange’s cookie. The string must be in base85 cookie safe
  //    characters and be in any format. Proper JSON encoding must
  //    be used to include “escaped” quotation marks.
  optional string customdata = 6;

  //Location of the user’s home base defined by a Geo object
  //. This is not necessarily their current location.
  optional Geo geo = 7;

  //Additional user data. Each Data object
  //    represents a different data source.
  repeated Data data = 8;

  //Placeholder for exchange-specific extensions to OpenRTB.
  optional Ext ext = 9;
}

message Data {
  //Exchange-specific ID for the data provider.
  optional string id = 1;

  //Exchange-specific name for the data provider.
  optional string name = 2;

  //Array of Segment objects that contain the
  //    actual data values.
  repeated Segment segment = 3;

  //Placeholder for exchange-specific extensions to OpenRTB.
  optional Ext ext = 4;
}

message Segment {
  //ID of the data segment specific to the data provider.
  optional string id = 1;

  //Name of the data segment specific to the data provider.
  optional string name = 2;

  //String representation of the data segment value.
  optional string value = 3;

  //Placeholder for exchange-specific extensions to OpenRTB.
  optional Ext ext = 4;
}
